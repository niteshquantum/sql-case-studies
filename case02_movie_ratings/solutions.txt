use SalesDB;
select * from Sales.Customers;
select * from Sales.Orders;
select * from Sales.Products;
select * from Sales.OrdersArchive;
select * from Sales.Employees;

-- TASK 1: Calculate the Total Sales Across All Orders
select sum(sales) as total_sales
from Sales.Orders;

-- TASK 2: Calculate the Total Sales for Each Product
select p.productid,p.product,sum(p.Price*o.Quantity) as total_sale
from Sales.Products p
join Sales.Orders o on p.ProductID=o.ProductID
group by p.ProductID,p.Product;

-- TASK 3: Find the total sales across all orders, additionally providing details such as OrderID and OrderDate
select o.OrderID,o.OrderDate,sum(o.sales) as total_sales	
from Sales.Orders o
group by o.OrderID,o.OrderDate;
-- alterenate way
SELECT 
    o.OrderID,o.OrderDate,
    SUM(p.Price * o.Quantity) AS TotalSales
	FROM Sales.Orders o
	JOIN Sales.Products p ON o.ProductID = p.ProductID
	GROUP BY o.OrderID,o.OrderDate;
-- 
-- TASK 4: Find the total sales across all orders and for each product, 
-- additionally providing details such as OrderID and OrderDate
select    o.OrderID,o.OrderDate, p.ProductID, p.Product,
    SUM(p.Price * o.Quantity) as TotalSales
from Sales.Orders o
join Sales.Products p ON o.ProductID = p.ProductID
GROUP BY  o.OrderID, o.OrderDate, p.ProductID, p.Product;



-- 
-- TASK 5: Find the total sales across all orders, for each product, 
-- and for each combination of product and order status, 
-- additionally providing details such as OrderID and OrderDate

select o.OrderID,o.OrderDate,o.OrderStatus,p.productid,p.product,sum(p.Price*o.Quantity) as total_sale
from Sales.Orders o
join Sales.Products p on o.ProductID=p.ProductID
group by o.OrderID,o.OrderDate,o.OrderStatus,p.productid,p.product;
 
-- TASK 6: Rank each order by Sales from highest to lowest
	select o.OrderID,sum(o.sales) as total_sale,
	rank() over(order by sum(o.sales) desc) as ranking
	from Sales.Orders o
	group by o.OrderID;
-- 
-- TASK 7: Calculate Total Sales by Order Status for current and next two orders
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over(order by o.orderid rows between current row and 2 following) as sales3
from Sales.Orders o;
--
-- partition bhi kr skte hai ager grouping cahiye tho
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over(partition by o.orderstatus order by o.orderid rows between current row and 2 following) as sales3
from Sales.Orders o;

-- TASK 8: Calculate Total Sales by Order Status for current and previous two orders
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over(order by o.orderid rows between 2 preceding and current row) as sales3
from Sales.Orders o;
-- partion by order status bhi add kr skte hai ager grouping cahiye tho
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over( partition by o.orderstatus order by o.orderid rows between 2 preceding and current row ) as sales3
from Sales.Orders o;
-- 
	-- TASK 9: Calculate Total Sales by Order Status from previous two orders only
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over(order by o.orderid rows between 2 preceding and 1 preceding ) as sales2
from Sales.Orders o;
-- partion by order status bhi add kr skte hai ager grouping cahiye tho
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over( partition by o.orderstatus order by o.orderid rows between 2 preceding and 1 preceding ) as sales2
from Sales.Orders o;

-- TASK 10: Calculate cumulative Total Sales by Order Status up to the current order
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over( partition by o.orderstatus order by o.orderid ) cumulative_sum
from Sales.Orders o;
-- 
-- TASK 11: Calculate cumulative Total Sales by Order Status from the start to the current row
select o.OrderID,o.OrderStatus ,o.Sales
,sum(o.Sales) over( partition by o.orderstatus order by o.orderid ) cumulative_sum
from Sales.Orders o;

-- 
-- TASK 12: Rank customers by their total sales
select c.CustomerID,c.FirstName,sum(o.sales) as total_sales,
rank() over(order by sum(o.sales) desc) as ranking
from Sales.Customers c
join Sales.Orders o on c.CustomerID=o.CustomerID
group by c.CustomerID,c.FirstName;
-- --------------------------------------------------------------------------------------------------
-- 
-- TASK 1: Find the Total Number of Orders and the Total Number of Orders for Each Customer
select distinct count(o.OrderID)over() as total_num_orders,
	c.CustomerID,c.FirstName,
	count(o.OrderID) over(partition by c.customerid) as total_num_oreder_percustomer
	from Sales.Customers c
	join Sales.Orders o on c.CustomerID=o.CustomerID
-- 
-- TASK 2: Find the Total Number of Customers, the Total Number of Scores for Customers, and the Total Number of Countries
select count(c.CustomerID) as total_num_customers,
	count(c.Score) as total_num_scores,
	count(distinct c.Country) as total_num_country
from Sales.Customers c
-- TASK 3: Check whether the table 'OrdersArchive' contains any duplicate rows
select * from Sales.OrdersArchive
except
select distinct * from Sales.OrdersArchive;

select 
    *, count(*) as duplicatecount
from  sales.ordersarchive
group by orderid, productid, customerid, salespersonid, orderdate, shipdate,
    orderstatus, shipaddress, billaddress, quantity, sales, creationtime
having  count(*) > 1;
--

-- TASK 4: Find the Total Sales Across All Orders and the Total Sales for Each Product
select sum(sales) as totalsales
from sales.orders;

select p.productid,p.product,sum(o.sales) as productwisetotalsales
    from sales.orders o
    join sales.products p on o.productid = p.productid
    group by p.productid, p.product;
-- ab dono ko 1 me
select distinct sum(o.sales)over() totalsales,
     p.productid,p.product,
	 sum(o.sales)over(partition by p.productid) as productwisetotalsales
    from sales.orders o
    join sales.products p on o.productid = p.productid;
-- 
-- TASK 5: Find the Percentage Contribution of Each Product's Sales to the Total Sales
with c as (
select distinct sum(o.sales)over() totalsales,
     p.productid,p.product,
	 sum(o.sales)over(partition by p.productid) as productwisetotalsales
    from sales.orders o
    join sales.products p on o.productid = p.productid
	)
	select * ,
	 round(cast(c.productwisetotalsales as float)/c.totalsales*100,2) 
	 -- ye bhi kr skte hai 
	 -- ROUND((c.productwisetotalsales * 100.0) / c.totalsales, 2) -- but 36.840000000000 round hone pr oo ni ja rhe hai
	 as percent_contri from c;
	-- remember int/int = int like cote/bde =0 so we cast first float /int ya int/float=float
-- TASK 6: Find the Average Sales Across All Orders and the Average Sales for Each Product
select distinct avg(o.sales)over() avgsales,
     p.productid,p.product,
	 avg(o.sales)over(partition by p.productid) as productwiseavg
    from sales.orders o
    join sales.products p on o.productid = p.productid;

-- TASK 7: Find the Average Scores of Customers
select avg(c.score) as avgscore
 from Sales.Customers c;

-- 
-- TASK 8: Find all orders where Sales exceed the average Sales across all orders
select *
from sales.orders
where sales > (
    select avg(sales)
     from sales.orders);



-- TASK 9: Find the Highest and Lowest Sales across all orders
select 
    max(sales) as highestsales,
    min(sales) as lowestsales
from sales.orders;

-- agr apne ko unki value bhi cahiyr tho orders ki
-- hightest sale ditial
select *
from sales.orders
where sales = (select max(sales) from sales.orders);

-- lowest salesditiAL
select *
from sales.orders
where sales = (select min(sales) from sales.orders);

-- combination cahiye tho
select *
from sales.orders
where sales = (select max(sales) from sales.orders) or Sales=(select min(sales) from sales.orders);


-- TASK 10: Find the Lowest Sales across all orders and by Product
-- 1. all order ki lowest
 select min(sales) as lowestsaleorders
  from sales.orders;
-- 2 by product
select p.product, min(o.sales) as lowestsalesprod
from sales.products p
join sales.orders o on p.productid = o.productid
group by p.product;

-- 1 me krna hai tho window
select distinct
	min(o.sales) over() as lowestsaleallorder,
   p.product, min(o.sales)over(partition by p.productid) as lowestsalesprod
from sales.products p
join sales.orders o on p.productid = o.productid



-- TASK 11: Show the employees who have the highest salaries

select employeeid, firstname, lastname, salary
from sales.employees
where salary = (select max(salary) from sales.employees);


-- TASK 12: Find the deviation of each Sale from the minimum and maximum Sales
select  orderid, productid, sales,
    (sales - (select min(sales) from sales.orders)) as devmin,
    (sales - (select max(sales) from sales.orders)) as devmax
from sales.orders;

 
-- TASK 13: Calculate the moving average of Sales for each Product over time
select orderid,productid,orderdate,sales,
    avg(sales) over (partition by productid order by orderdate ) as movingavg
from sales.orders
order by productid, orderdate;

-- 
-- TASK 14: Calculate the moving average of Sales for each Product over time, including only the next order
select orderid,productid,orderdate,sales,
    avg(sales) over (partition by productid
						order by orderdate 
						rows between current row and 1 following) as movingavg
from sales.orders
order by productid, orderdate;
